#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

struct Task {
    string description;
    string category;
    bool completed;

    Task(string desc, string cat = "", bool comp = false)
        : description(desc), category(cat), completed(comp) {}
};

vector<Task> tasks;

// Function to load tasks from file
void loadTasks(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) return;

    string desc, cat;
    bool comp;
    while (getline(file, desc)) {
        getline(file, cat);
        file >> comp;
        file.ignore();
        tasks.emplace_back(desc, cat, comp);
    }

    file.close();
}

// Function to save tasks to file
void saveTasks(const string& filename) {
    ofstream file(filename);
    for (const auto& task : tasks) {
        file << task.description << '\n'
             << task.category << '\n'
             << task.completed << '\n';
    }
    file.close();
}

// Add new task
void addTask() {
    string desc, cat;
    cout << "Enter task description: ";
    cin.ignore();
    getline(cin, desc);
    cout << "Enter category (optional): ";
    getline(cin, cat);
    tasks.emplace_back(desc, cat);
    cout << "Task added.\n";
}

// Mark task as completed
void markTaskCompleted() {
    cout << "Pending Tasks:\n";
    for (size_t i = 0; i < tasks.size(); ++i) {
        if (!tasks[i].completed)
            cout << i << ". " << tasks[i].description << " [" << tasks[i].category << "]\n";
    }

    int idx;
    cout << "Enter task number to mark as completed: ";
    cin >> idx;

    if (idx >= 0 && idx < tasks.size() && !tasks[idx].completed) {
        tasks[idx].completed = true;
        cout << "Task marked as completed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

// View tasks
void viewTasks(bool showCompleted) {
    cout << (showCompleted ? "\nCompleted Tasks:\n" : "\nPending Tasks:\n");
    for (size_t i = 0; i < tasks.size(); ++i) {
        if (tasks[i].completed == showCompleted)
            cout << i << ". " << tasks[i].description
                 << " [" << tasks[i].category << "]\n";
    }
}

// Menu
void showMenu() {
    int choice;
    string filename = "tasks.txt";
    loadTasks(filename);

    do {
        cout << "\n--- TO-DO LIST MENU ---\n";
        cout << "1. Add Task\n";
        cout << "2. Mark Task as Completed\n";
        cout << "3. View Pending Tasks\n";
        cout << "4. View Completed Tasks\n";
        cout << "5. Exit\n";
        cout << "Choose an option: ";
        cin >> choice;

        switch (choice) {
            case 1: addTask(); break;
            case 2: markTaskCompleted(); break;
            case 3: viewTasks(false); break;
            case 4: viewTasks(true); break;
            case 5: saveTasks(filename); cout << "Tasks saved. Exiting...\n"; break;
            default: cout << "Invalid option.\n";
        }
    } while (choice != 5);
}

int main() {
    showMenu();
    return 0;
}